# -*- coding: utf-8 -*-
"""MNIST_BATCHNORMALIZATION.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1K1bNFm8LfMKbqz1vgO0y-I1By8R1ABwk
"""

#CNN for the MNIST Dataset WITH SIGMOID FUNCTION USING BATCH NORMALIZATION
from keras.datasets import mnist
from keras.models import Sequential
from keras.layers import Dense
from keras.layers import Dropout
from keras.layers import Flatten
from keras.layers.convolutional import Conv2D
from keras.layers.convolutional import MaxPooling2D
from keras.utils import np_utils
from tensorflow.keras.optimizers import SGD
from keras.layers import BatchNormalization
from tensorflow.keras.utils import to_categorical
from keras.constraints import maxnorm
from keras.layers import Activation
import numpy


# load data
seed = 21
(X_train, y_train), (X_test, y_test) = mnist.load_data()
# reshape to be [samples][width][height][channels]
X_train = X_train.reshape((X_train.shape[0], 28, 28, 1)).astype('float32')
X_test = X_test.reshape((X_test.shape[0], 28, 28, 1)).astype('float32')
# normalize inputs from 0-255 to 0-1
X_train = X_train / 255
X_test = X_test / 255
# one hot encode outputs
y_train = np_utils.to_categorical(y_train)
y_test = np_utils.to_categorical(y_test)
num_classes = y_test.shape[1]
# define a simple CNN model
def baseline_model():
 model = Sequential()
 model.add(Conv2D(32, (3, 3), input_shape=(28,28,1)))
 model.add(BatchNormalization())
 model.add(Activation('relu'))
 model.add(Conv2D(32, (3, 3)))
 model.add(BatchNormalization())
 model.add(Activation('relu'))
 model.add(MaxPooling2D(pool_size=(2,2)))

 model.add(Conv2D(64,(3, 3)))
 model.add(BatchNormalization())
 model.add(Activation('relu'))
 model.add(Conv2D(64, (3, 3)))
 model.add(BatchNormalization())
 model.add(Activation('relu'))
 model.add(MaxPooling2D(pool_size=(2,2)))

 model.add(Flatten())

# Fully connected layer
 model.add(Dense(512))
 model.add(BatchNormalization())
 model.add(Activation('relu'))
 model.add(Dropout(0.2))
 model.add(Dense(10))

 model.add(Activation('sigmoid'))

	# Compile model
 
 model.compile(loss='categorical_crossentropy', optimizer= 'adam', metrics=['accuracy'])
 return model
# build the model
model = baseline_model()
# Fit the model
numpy.random.seed(seed)
model.fit(X_train, y_train, validation_data=(X_test, y_test), epochs=10, batch_size=200)
# Final evaluation of the model
scores = model.evaluate(X_test, y_test, verbose=0)
print("CNN Error: %.2f%%" % (100-scores[1]*100))

#CNN for the MNIST Dataset WITH RELU FUNCTION USING BATCH NORMALIZATION
from keras.datasets import mnist
from keras.models import Sequential
from keras.layers import Dense
from keras.layers import Dropout
from keras.layers import Flatten
from keras.layers.convolutional import Conv2D
from keras.layers.convolutional import MaxPooling2D
from keras.utils import np_utils
from tensorflow.keras.optimizers import SGD
from keras.layers import BatchNormalization
from tensorflow.keras.utils import to_categorical
from keras.constraints import maxnorm
from keras.layers import Activation
import numpy


# load data
seed = 21
(X_train, y_train), (X_test, y_test) = mnist.load_data()
# reshape to be [samples][width][height][channels]
X_train = X_train.reshape((X_train.shape[0], 28, 28, 1)).astype('float32')
X_test = X_test.reshape((X_test.shape[0], 28, 28, 1)).astype('float32')
# normalize inputs from 0-255 to 0-1
X_train = X_train / 255
X_test = X_test / 255
# one hot encode outputs
y_train = np_utils.to_categorical(y_train)
y_test = np_utils.to_categorical(y_test)
num_classes = y_test.shape[1]
# define a simple CNN model
def baseline_model():
 model = Sequential()
 model.add(Conv2D(32, (3, 3), input_shape=(28,28,1)))
 model.add(BatchNormalization())
 model.add(Activation('relu'))
 model.add(Conv2D(32, (3, 3)))
 model.add(BatchNormalization())
 model.add(Activation('relu'))
 model.add(MaxPooling2D(pool_size=(2,2)))

 model.add(Conv2D(64,(3, 3)))
 model.add(BatchNormalization())
 model.add(Activation('relu'))
 model.add(Conv2D(64, (3, 3)))
 model.add(BatchNormalization())
 model.add(Activation('relu'))
 model.add(MaxPooling2D(pool_size=(2,2)))

 model.add(Flatten())

# Fully connected layer
 model.add(Dense(512))
 model.add(BatchNormalization())
 model.add(Activation('relu'))
 model.add(Dropout(0.2))
 model.add(Dense(10))

 model.add(Activation('relu'))

	# Compile model
 
 model.compile(loss='categorical_crossentropy', optimizer= 'adam', metrics=['accuracy'])
 return model
# build the model
model = baseline_model()
# Fit the model
numpy.random.seed(seed)
model.fit(X_train, y_train, validation_data=(X_test, y_test), epochs=10, batch_size=200)
# Final evaluation of the model
scores = model.evaluate(X_test, y_test, verbose=0)
print("CNN Error: %.2f%%" % (100-scores[1]*100))

#CNN for the MNIST Dataset WITH ELU FUNCTION USING BATCH NORMALIZATION
from keras.datasets import mnist
from keras.models import Sequential
from keras.layers import Dense
from keras.layers import Dropout
from keras.layers import Flatten
from keras.layers.convolutional import Conv2D
from keras.layers.convolutional import MaxPooling2D
from keras.utils import np_utils
from tensorflow.keras.optimizers import SGD
from keras.layers import BatchNormalization
from tensorflow.keras.utils import to_categorical
from keras.constraints import maxnorm
from keras.layers import Activation
import numpy


# load data
seed = 21
(X_train, y_train), (X_test, y_test) = mnist.load_data()
# reshape to be [samples][width][height][channels]
X_train = X_train.reshape((X_train.shape[0], 28, 28, 1)).astype('float32')
X_test = X_test.reshape((X_test.shape[0], 28, 28, 1)).astype('float32')
# normalize inputs from 0-255 to 0-1
X_train = X_train / 255
X_test = X_test / 255
# one hot encode outputs
y_train = np_utils.to_categorical(y_train)
y_test = np_utils.to_categorical(y_test)
num_classes = y_test.shape[1]
# define a simple CNN model
def baseline_model():
 model = Sequential()
 model.add(Conv2D(32, (3, 3), input_shape=(28,28,1)))
 model.add(BatchNormalization())
 model.add(Activation('relu'))
 model.add(Conv2D(32, (3, 3)))
 model.add(BatchNormalization())
 model.add(Activation('relu'))
 model.add(MaxPooling2D(pool_size=(2,2)))

 model.add(Conv2D(64,(3, 3)))
 model.add(BatchNormalization())
 model.add(Activation('relu'))
 model.add(Conv2D(64, (3, 3)))
 model.add(BatchNormalization())
 model.add(Activation('relu'))
 model.add(MaxPooling2D(pool_size=(2,2)))

 model.add(Flatten())

# Fully connected layer
 model.add(Dense(512))
 model.add(BatchNormalization())
 model.add(Activation('relu'))
 model.add(Dropout(0.2))
 model.add(Dense(10))

 model.add(Activation('elu'))

	# Compile model
 
 model.compile(loss='categorical_crossentropy', optimizer= 'adam', metrics=['accuracy'])
 return model
# build the model
model = baseline_model()
# Fit the model
numpy.random.seed(seed)
model.fit(X_train, y_train, validation_data=(X_test, y_test), epochs=10, batch_size=200)
# Final evaluation of the model
scores = model.evaluate(X_test, y_test, verbose=0)
print("CNN Error: %.2f%%" % (100-scores[1]*100))

#CNN for the MNIST Dataset WITH SELU FUNCTION USING BATCH NORMALIZATION
from keras.datasets import mnist
from keras.models import Sequential
from keras.layers import Dense
from keras.layers import Dropout
from keras.layers import Flatten
from keras.layers.convolutional import Conv2D
from keras.layers.convolutional import MaxPooling2D
from keras.utils import np_utils
from tensorflow.keras.optimizers import SGD
from keras.layers import BatchNormalization
from tensorflow.keras.utils import to_categorical
from keras.constraints import maxnorm
from keras.layers import Activation
import numpy


# load data
seed = 21
(X_train, y_train), (X_test, y_test) = mnist.load_data()
# reshape to be [samples][width][height][channels]
X_train = X_train.reshape((X_train.shape[0], 28, 28, 1)).astype('float32')
X_test = X_test.reshape((X_test.shape[0], 28, 28, 1)).astype('float32')
# normalize inputs from 0-255 to 0-1
X_train = X_train / 255
X_test = X_test / 255
# one hot encode outputs
y_train = np_utils.to_categorical(y_train)
y_test = np_utils.to_categorical(y_test)
num_classes = y_test.shape[1]
# define a simple CNN model
def baseline_model():
 model = Sequential()
 model.add(Conv2D(32, (3, 3), input_shape=(28,28,1)))
 model.add(BatchNormalization())
 model.add(Activation('relu'))
 model.add(Conv2D(32, (3, 3)))
 model.add(BatchNormalization())
 model.add(Activation('relu'))
 model.add(MaxPooling2D(pool_size=(2,2)))

 model.add(Conv2D(64,(3, 3)))
 model.add(BatchNormalization())
 model.add(Activation('relu'))
 model.add(Conv2D(64, (3, 3)))
 model.add(BatchNormalization())
 model.add(Activation('relu'))
 model.add(MaxPooling2D(pool_size=(2,2)))

 model.add(Flatten())

# Fully connected layer
 model.add(Dense(512))
 model.add(BatchNormalization())
 model.add(Activation('relu'))
 model.add(Dropout(0.2))
 model.add(Dense(10))

 model.add(Activation('selu'))

	# Compile model
 
 model.compile(loss='categorical_crossentropy', optimizer= 'adam', metrics=['accuracy'])
 return model
# build the model
model = baseline_model()
# Fit the model
numpy.random.seed(seed)
model.fit(X_train, y_train, validation_data=(X_test, y_test), epochs=10, batch_size=200)
# Final evaluation of the model
scores = model.evaluate(X_test, y_test, verbose=0)
print("CNN Error: %.2f%%" % (100-scores[1]*100))

#CNN for the MNIST Dataset WITH Tanh FUNCTION USING BATCH NORMALIZATION
from keras.datasets import mnist
from keras.models import Sequential
from keras.layers import Dense
from keras.layers import Dropout
from keras.layers import Flatten
from keras.layers.convolutional import Conv2D
from keras.layers.convolutional import MaxPooling2D
from keras.utils import np_utils
from tensorflow.keras.optimizers import SGD
from keras.layers import BatchNormalization
from tensorflow.keras.utils import to_categorical
from keras.constraints import maxnorm
from keras.layers import Activation
import numpy


# load data
seed = 21
(X_train, y_train), (X_test, y_test) = mnist.load_data()
# reshape to be [samples][width][height][channels]
X_train = X_train.reshape((X_train.shape[0], 28, 28, 1)).astype('float32')
X_test = X_test.reshape((X_test.shape[0], 28, 28, 1)).astype('float32')
# normalize inputs from 0-255 to 0-1
X_train = X_train / 255
X_test = X_test / 255
# one hot encode outputs
y_train = np_utils.to_categorical(y_train)
y_test = np_utils.to_categorical(y_test)
num_classes = y_test.shape[1]
# define a simple CNN model
def baseline_model():
 model = Sequential()
 model.add(Conv2D(32, (3, 3), input_shape=(28,28,1)))
 model.add(BatchNormalization())
 model.add(Activation('relu'))
 model.add(Conv2D(32, (3, 3)))
 model.add(BatchNormalization())
 model.add(Activation('relu'))
 model.add(MaxPooling2D(pool_size=(2,2)))

 model.add(Conv2D(64,(3, 3)))
 model.add(BatchNormalization())
 model.add(Activation('relu'))
 model.add(Conv2D(64, (3, 3)))
 model.add(BatchNormalization())
 model.add(Activation('relu'))
 model.add(MaxPooling2D(pool_size=(2,2)))

 model.add(Flatten())

# Fully connected layer
 model.add(Dense(512))
 model.add(BatchNormalization())
 model.add(Activation('relu'))
 model.add(Dropout(0.2))
 model.add(Dense(10))

 model.add(Activation('tanh'))

	# Compile model
 
 model.compile(loss='categorical_crossentropy', optimizer= 'adam', metrics=['accuracy'])
 return model
# build the model
model = baseline_model()
# Fit the model
numpy.random.seed(seed)
model.fit(X_train, y_train, validation_data=(X_test, y_test), epochs=10, batch_size=200)
# Final evaluation of the model
scores = model.evaluate(X_test, y_test, verbose=0)
print("CNN Error: %.2f%%" % (100-scores[1]*100))