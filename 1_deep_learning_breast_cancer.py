# -*- coding: utf-8 -*-
"""1_Deep_learning_Breast_Cancer.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lVfwr1LffrM9DLq9aVT2I7hqefhZwnUy
"""

# Uploading file
from google.colab import files

uploaded = files.upload()

for fn in uploaded.keys():
  print('User uploaded file "{name}" with length {length} bytes'.format(
      name=fn, length=len(uploaded[fn])))

# Importing File
import pandas as pd
import io
df=pd.read_csv(io.StringIO(uploaded['data.csv'].decode('utf-8')))
df.head()

df.shape

df[df["Unnamed: 32"].isnull()]

#Drop the Null coloumn
df.dropna(axis=1, inplace=True)

df.shape

df.head()

# Visualization dependent Variable(Diagnosis) using Seaborn - B, M
import seaborn as sns
ax = sns.countplot(data['diagnosis'], label= 'Count')
B,M = data['diagnosis'].value_counts()
print('Benign', B)
print('Malignanat', M)

#Importing important libraries
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

X = data.iloc[:, 2:].values
y = data.iloc[:, 1].values

# Encoding categorical data
from sklearn.preprocessing import LabelEncoder
labelencoder_X_1 = LabelEncoder()
y = labelencoder_X_1.fit_transform(y)

# Splitting the dataset into the Training set and Test set
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.1, random_state = 0)

#Feature Scaling
from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
X_train = sc.fit_transform(X_train)
X_test = sc.transform(X_test)

X_train

X_test

!pip install keras

import keras
from keras.models import Sequential # ANN work step by step
from keras.layers import Dense # for adding input layer and hidden layer
from keras.layers import Dropout

#adding the input and first hidden layer
model = Sequential()
model.add(Dense(units=16,kernel_initializer='he_uniform',activation='relu',input_dim=30))

#adding the second hidden layer
model.add(Dense(units=16,kernel_initializer='he_uniform',activation='relu'))

#adding the output layer
model.add(Dense(units=1,kernel_initializer='glorot_uniform',activation='sigmoid'))

model.summary()

model.compile(optimizer="Adam", loss='binary_crossentropy', metrics=['accuracy'])

model.fit(X_train, y_train, batch_size=100, epochs=150)

# Predicting the Test set results
y_pred = model.predict(X_test)
y_pred = (y_pred > 0.5)

# Making the Confusion Matrix
from sklearn.metrics import confusion_matrix
cm = confusion_matrix(y_test, y_pred)

sns.heatmap(cm,annot=True)
plt.savefig('h.png')

